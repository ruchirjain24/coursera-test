vector<vector<int>> dp;
vector<vector<bool>> v;
int minMergeCost(int i, int j, vector<int> arr)
{
    if (i == j)
        return 0;
    if (v[i][j])
        return dp[i][j];
    v[i][j] = 1;
    int& x = dp[i][j];
    x = INT_MAX;
    int tot = 0;
    for (int k = i; k <= j; k++)
        tot += arr[k];
    for (int k = i + 1; k <= j; k++) {
        x = min(x, tot + minMergeCost(i, k - 1, arr)
                       + minMergeCost(k, j, arr));
    }
    return x;
}
int Solution::solve(vector<int> &A) {
    int n=A.size();
    dp.assign(n,vector<int> (n,0));
    v.assign(n,vector<bool> (n,false));
    return minMergeCost(0,n-1,A);
}