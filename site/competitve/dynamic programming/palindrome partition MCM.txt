bool isPalindrome(string &A,int i,int j){
    if(i==j)
        return true;
    if(i>j)
        return true;
    while(i<j){
        if(A[i]!=A[j])
            return false;
        i++;
        j--;
    }
    return true;
}
int static t[503][503];
int doit(string &A,int i,int j){
    if(t[i][j]!=-1)
        return t[i][j];
    if(i>=j)
        return t[i][j]=0;
    if(isPalindrome(A,i,j))
        return t[i][j]=0;
    int min=A.length()-1;
    for(int k=i;k<=j-1;k++){
        int left;
        if(t[i][k]!=-1)
            left=t[i][k];
        else{
            left=doit(A,i,k);
            t[i][k]=left;
        }
        int right;
        if(t[k+1][j]!=-1)
            right=t[k+1][j];
        else{
            right=doit(A,k+1,j);
            t[k+1][j]=right;
        }
        int temp=left+right+1;
        if(temp<min)
            min=temp;
    }
    return t[i][j]=min;
}
int Solution::minCut(string A){
    memset(t,-1,sizeof(t));
    return doit(A,0,A.length()-1);
}