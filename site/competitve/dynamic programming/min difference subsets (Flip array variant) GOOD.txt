int Solution::solve(vector<int> &A) {
    int n = A.size();
    int totalsum = 0;
    for(int i=0;i<n;i++)
    totalsum += A[i];
     int dp[n+1][totalsum];
     for(int i=0;i<totalsum+1;i++)
     dp[0][i] = 0;
     for(int i=0;i<n+1;i++)
     dp[i][0] = 1;
     for(int i=1;i<n+1;i++)
     for(int j=0;j<totalsum+1;j++)
     {
         if(A[i-1]<=j)
         dp[i][j] = dp[i-1][j-A[i-1]] | dp[i-1][j];
         else
         dp[i][j] = dp[i-1][j];
     }
     int ans = INT_MAX;
     vector<int>B;
     for(int i=0;i<=totalsum/2;i++)
     {
         if(dp[n][i] == 1)
         ans = min(ans ,(totalsum - i*2));
     }
     return ans;
}


OR

int Solution::solve(vector<int> &A) {
     int sum=0;
    for(int i=0;i<A.size();i++) 
        sum+=A[i];
    int sumi=sum;
    sum/=2;
    vector<int> dp(sum+1, INT_MAX);
    dp[0]=0;
    for(int i=0;i<A.size();i++){
        for(int j=sum;j>=A[i];j--){
            if(dp[j-A[i]]!=INT_MAX) 
                dp[j]=min(dp[j], dp[j-A[i]]+1);
        }
    }
    int ans=0;
    for(int i=sum;i>=0 ;i--){
        if(dp[i]!=INT_MAX) {
            ans= i;
            break;
        }    
    }
    return sumi-2*ans;
}
