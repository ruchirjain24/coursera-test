int Solution::maxProfit(const vector<int> &A) {
    int n=A.size();
    if(n==0)
        return 0;
    if(n==1)
        return 0;
    vector<int> less (n);
    vector<int> great (n);
    less[0]=A[0];
    great[n-1]=A[n-1];
    for(int i=1;i<n;i++)
        if(A[i]<less[i-1])
            less[i]=A[i];
        else
            less[i]=less[i-1];
    for(int i=n-2;i>=0;i--)
        if(A[i]>great[i+1])
            great[i]=A[i];
        else
            great[i]=great[i+1];
    int maxP=0;
    for(int i=0;i<n;i++){
        if(maxP<great[i]-less[i])
            maxP=great[i]-less[i];
    }
    return maxP;
}