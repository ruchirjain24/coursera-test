unordered_map<char, string> keypad = {
    { '1', "1" },
    { '2', "abc" },
    { '3', "def" },
    { '4', "ghi" },
    { '5', "jkl" },
    { '6', "mno" },
    { '7', "pqrs" },
    { '8', "tuv" },
    { '9', "wxyz" },
    { '0', "0" }
};
void letterCombUtil(vector<string> &res,string &curr,string A,int index){
    if(index==A.size()){
        res.push_back(curr);
    }
    else{
        string str = keypad[A[index]];
        for(int i=0;i<str.length();i++){
            curr+=str[i];
            letterCombUtil(res,curr,A,index+1);
            curr.pop_back();
        }
    }
    return;
}
vector<string> Solution::letterCombinations(string A) {
    vector<string> res;
    string curr="";
    letterCombUtil(res,curr,A,0);
    return res;
}