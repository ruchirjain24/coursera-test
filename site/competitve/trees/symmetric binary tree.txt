bool check(TreeNode *A,TreeNode *B)
{
    if(A==NULL && B==NULL)
        return true;
    else if(A==NULL || B==NULL)
        return false;
    else if(A->val!=B->val)
        return false;
    else if(!check(A->right,B->left) || !check(A->left,B->right))
        return false;
    else
        return true;
}
int Solution::isSymmetric(TreeNode* A) {
    return check(A->left,A->right);
}


OR




void inorderAsc(TreeNode* root,vector<int> &v1){
    if(root==NULL)
        return;
    inorderAsc(root->left,v1);
    v1.push_back(root->val);
    inorderAsc(root->right,v1);
    return;
}
int Solution::isSymmetric(TreeNode* A) {
    vector<int> v1;
    vector<int> v2;
    inorderAsc(A,v1);
    int flag=1;
    int i=0,j=v1.size()-1;
    if(v1.size()%2==0)
        return 0;
    while(i<j){
        if(v1[i]!=v1[j])
            return 0;
        i++;
        j--;
    }
        return 1;
}