vector<TreeNode *> constructTrees(int start, int end)
{
    vector<TreeNode *> list;
    if (start > end)
    {
        list.push_back(NULL);
        return list;
    }
    for (int i = start; i <= end; i++)
    {
        vector<TreeNode *> leftSubtree  = constructTrees(start, i - 1);
        vector<TreeNode *> rightSubtree = constructTrees(i + 1, end);
        for (int j = 0; j < leftSubtree.size(); j++)
        {
            TreeNode* left = leftSubtree[j];
            for (int k = 0; k < rightSubtree.size(); k++)
            {
                TreeNode * right = rightSubtree[k];
                TreeNode * node = new TreeNode(i);   // making value i as root
                node->left = left;              // connect left subtree
                node->right = right;            // connect right subtree
                list.push_back(node);           // add this tree to list
            }
        }
    }
    return list;
}
vector<TreeNode*> Solution::generateTrees(int A) {
    return constructTrees(1,A);
}